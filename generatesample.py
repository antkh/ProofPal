# -*- coding: utf-8 -*-
"""GenerateSample.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JiFCkWDVtFra7CwE5xjbEG9kO0B1Hhqu
"""

def show_state(S):
  First = True
  for statement in S:
    if not First:
      print(" & ", end="")
    else:
      First = False
    print("( ", end="")
    first = True
    for clause in statement:
      if not first:
        print(" v ", end="")
      else:
        first = False
      print(show_clause(clause), end="")

    print(" )", end="")

predMap = {1:"P", 2:"Q", 3:"R"}
varMap = {1:"x", 2:"y", 3:"z", -1:"a", -2:"b", -3:"c", -4:"d", -5:"e", -6:"i", -7:"j"}
funMap = {1:"f", 2:"g"}

def show_clause(c):
  res = ""
  if c[0] < 0:
    res += "~"
  res += predMap[abs(c[0])] + "("
  if c[2] != 0:
    res += funMap[c[2]] + "(" + varMap[c[1]] + ")"
  else:
    res += varMap[c[1]]
  res += ")"
  return res

import random
import math

def r(low = 1, high = 10):
  return random.randint(low, high)

n_data = 1000 # Number of data points
data = []

for index_datum in range(n_data):

  bound = int(math.log10(n_data))

  number_of_statements = r(2,10)
  number_of_atomic_statements = [1] * number_of_statements
  for i in range(int(number_of_statements*random.uniform(0,1))):
    number_of_atomic_statements[i] = r(1,bound)

  u_vals = []
  v_vals = []
  w_vals = [0]

  for i in range(1,bound):

    u_vals.append(i)
    u_vals.append(-i)

    v_vals.append(i)
    v_vals.append(-i)

    w_vals.append(i)

  u_vals.append(bound)
  u_vals.append(-bound)

  datum = []
  for index_statement in range(number_of_statements):

    statement = []
    for index_atomic in range(number_of_atomic_statements[index_statement]):
      u = random.choice(u_vals)
      v = random.choice(v_vals)

      if v < 0:
        w = 0
      else:
        w = random.choice([0,random.choice(w_vals)])

      atomic = [u, v, w]
      statement.append(atomic)

    datum.append(statement)

  data.append(datum)

for datum in data:
  show_state(datum)
  print()

print(data)

import json

with open('data.json', 'w') as file:
    json.dump(data, file)